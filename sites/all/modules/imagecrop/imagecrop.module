<?php
// $Id: imagecrop.module,v 1.1.4.23 2010/08/16 08:31:19 zuuperman Exp $

/**
 * @file
 * Provides a javascript toolbox through an imagecache action.
 *
 * @author Kristof De Jaeger - http://drupal.org/user/107403 - http://realize.be
 * @version this is the drupal 6.x version
 */

/**
 * Implementation of hook_perm().
 */
function imagecrop_perm() {
  return array('crop any image with toolbox', 'crop images with toolbox', 'administer imagecrop');
}

/**
 * Implementation of hook_menu().
 */
function imagecrop_menu() {
  $items = array();

  $items['admin/settings/imagecrop'] = array(
    'title' => 'Imagecache javascript crop',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imagecrop_settings'),
    'access arguments' => array('administer imagecrop'),
  );
  $items['imagecrop/showcrop'] = array(
    'page callback' => 'imagecrop_showcrop',
    'type' => MENU_CALLBACK,
    'access arguments' => array('crop images with toolbox'),
  );
  $items['imagecrop/docrop'] = array(
    'page callback' => 'imagecrop_docrop',
    'type' => MENU_CALLBACK,
    'access arguments' => array('crop images with toolbox'),
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function imagecrop_theme() {
  return array(
    'imagecrop_javascript' => array(
      'arguments' => array('element' => NULL),
    ),
    'imagecrop' => array(
      'arguments' => array('url' => NULL, 'width' => NULL, 'height' => NULL, 'resize' => NULL),
    ),
    'imagecrop_result' => array(
      'arguments' => array('presetname' => NULL, 'filepath' => NULL, 'alt' => NULL, 'attributes' => NULL),
    ),
    'presettabs' => array(
      'arguments' => array('presets' => array(), 'fid' => NULL, 'presetid' => NULL, 'module' => NULL, 'field' => NULL, 'node_type' => NULL),
    ),
  );
}

/**
 * Implementation of hook_theme_registry_alter().
 */
function imagecrop_theme_registry_alter(&$theme_registry) {
  array_unshift($theme_registry['page']['theme paths'], drupal_get_path('module', 'imagecrop'));
}

/**
 * Imagecrop settings page
 */
function imagecrop_settings() {
  // hook into image module
  if (module_exists('image')) {
    $options_modules['image'] = t('Hook into image module');
  }
  // hook into node_images module
  if (module_exists('node_images')) {
    $result = db_query("SELECT name,value FROM {variable} WHERE name LIKE 'node_images_position_%'");
    if ($result) {
      drupal_set_message(t('When you want to enable support for the node_images module, please read the README that comes with the imagecrop module.'));
      while ($row = db_fetch_object($result)) {
        if (variable_get($row->name, 'hide') != 'hide') {
          $explode = explode('_', $row->name);
          $options_modules[$row->name] = t('Hook into node_images module for <em>content type @type</em>', array('@type' => $explode[3]));
        }
      }
    }
  }
  // show checkboxes if options are not empty
  if (!empty($options_modules)) {
    $form['imagecrop_modules'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Hook into modules'),
      '#default_value' => variable_get('imagecrop_modules', array()),
      '#options' => $options_modules,
    );
    $form['array_filter'] = array('#type' => 'hidden');
  }
  else {
    $form['no_modules_fields'] = array(
      '#type' => 'item',
      '#value' => t('No supported modules were found to hook into.'),
    );
  }

  if (module_exists('imagefield')) {
    $form['imagefield'] = array(
      '#type' => 'item',
      '#value' => t('Imagecrop settings for CCK Imagefields are found on the field configuration pages.'),
    );
  }

  $popups = array('basic' => t('Basic popup window'));
  if (module_exists('thickbox')) {
    $popups['thickbox'] = t('Thickbox');
  }

  $form['imagecrop_popup'] = array(
    '#type' => 'radios',
    '#title' => t('Popup window type'),
    '#default_value' => variable_get('imagecrop_popup', 'basic'),
    '#options' => $popups,
  );

  $form['imagecrop_popup_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Popup window width'),
    '#default_value' => variable_get('imagecrop_popup_width', 700),
    '#size' => 4,
    '#field_suffix' => 'pixels',
  );

  $form['imagecrop_popup_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Popup window height'),
    '#default_value' => variable_get('imagecrop_popup_height', 600),
    '#size' => 4,
    '#field_suffix' => 'pixels',
  );

  $form['imagecrop_scale_step'] = array(
    '#type' => 'textfield',
    '#title' => t('Step size for scale dropdown'),
    '#default_value' => variable_get('imagecrop_scale_step', 50),
    '#size' => 4,
    '#field_suffix' => 'pixels',
  );

  // drupal message if no action is found with javascript_crop
  if (imagecrop_action_exists() == FALSE) {
    drupal_set_message(t('No preset is found with the javascript_crop action so far. If you want to take advantage of this module, you will need to create at least one preset with that action.'));
  }
  return system_settings_form($form);
}

/**
 * Implementation of hook_cron().
 * Delete all references in imagecrop table when
 *   a) file doesn't exist anymore.
 *   b) when preset has been deleted.
 *   c) when javascrip_crop action is removed from a preset.
 */
function imagecrop_cron() {
  // get all files which do not exist anymore from the files table
  $result = db_query("SELECT ic.fid,ic.presetid FROM {imagecrop} ic WHERE NOT EXISTS (SELECT fid FROM {files} f WHERE ic.fid = f.fid) AND ic.reference = 'files'");
  while ($row = db_fetch_object($result)) {
    $records[] = array('fid' => $row->fid, 'presetid' => $row->presetid, 'reference' => 'files');
  }
  // get all files which do not exist anymore from the node_images table
  if (module_exists('node_images')) {
    $result = db_query("SELECT ic.fid,presetid FROM {imagecrop} ic WHERE NOT EXISTS (SELECT id FROM {node_images} ni WHERE ic.fid = ni.id) AND ic.reference = 'node_images'");
    while ($row = db_fetch_object($result)) {
      $records[] = array('fid' => $row->fid, 'presetid' => $row->presetid, 'reference' => 'node_images');
    }
  }
  /*
   * Get all records
   *  a) from presets which do not exist anymore.
   *  b) and/or from presets with no imagecrop_javascript action anymore.
   */
  // files table
  $result = db_query("SELECT ic.fid,ic.presetid FROM {imagecrop} ic WHERE NOT EXISTS (SELECT presetid FROM {imagecache_action} ia where ic.presetid = ia.presetid AND ia.action = 'imagecrop_javascript') AND ic.reference = 'files'");
  while ($row = db_fetch_object($result)) {
    $records[] = array('fid' => $row->fid, 'presetid' => $row->presetid, 'reference' => 'files');
  }
  // node_images table
  if (module_exists('node_images')) {
    $result = db_query("SELECT ic.fid,ic.presetid FROM {imagecrop} ic WHERE NOT EXISTS (SELECT presetid FROM {imagecache_action} ia where ic.presetid = ia.presetid AND ia.action = 'imagecrop_javascript') AND ic.reference = 'node_images'");
    while ($row = db_fetch_object($result)) {
      $records[] = array('fid' => $row->fid, 'presetid' => $row->presetid, 'reference' => 'node_images');
    }
  }
  if (!empty($records)) {
    while (list($key, $val) = each($records)) {
      db_query("DELETE FROM {imagecrop} WHERE fid=%d AND presetid=%d AND reference = '%s'", $val['fid'], $val['presetid'], $val['reference']);
    }
  }
}

/**
 * Implementation of hook_imagecache_actions().
 */
function imagecrop_imagecache_actions() {
  $actions = array(
    'imagecrop_javascript' => array(
      'name' => 'Javascript crop',
      'description' => 'Create a crop with a javascript toolbox.',
      'file' => 'imagecrop_actions.inc',
    ),
  );
  return $actions;
}

/**
 * Helper function to check if a preset exists with the imagecrop_javascript action.
 * Needed to determine if we have to display our javascript crop link.
 *
 * @return true or false
 */
function imagecrop_action_exists() {

  static $result = FALSE;

  if ($result !== FALSE) {
    return $result;
  }

  $result = db_result(db_query("SELECT actionid FROM {imagecache_action} WHERE action = 'imagecrop_javascript'"));
  return $result;

}

/**
 * Implementation of hook_widget_settings_alter().
 */
function imagecrop_widget_settings_alter(&$settings, $op, $widget) {
  // Only support modules that implement hook_insert_widgets().
  $widget_type = isset($widget['widget_type']) ? $widget['widget_type'] : $widget['type'];
  if ($widget_type != 'imagefield_widget') {
    return;
  }

  // Add our new options to the list of settings to be saved.
  if ($op == 'save') {
    $settings = array_merge($settings, imagecrop_widget_settings());
  }

  // Add the additional settings to the form.
  if ($op == 'form') {
    $settings = array_merge($settings, imagecrop_widget_form($widget));
  }
}

/**
 * A list of settings needed by Imagecrop module on widgets.
 */
function imagecrop_widget_settings() {
  return array(
    'imagecrop',
    'imagecrop_presets',
  );
}

/**
 * Configuration form for editing Imagecrop settings for a field instance.
 */
function imagecrop_widget_form($widget) {

  $form['imagecrop'] = array(
    '#type' => 'fieldset',
    '#title' => t('Imagecrop'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('These options allow the user to alter JavaScript crops for specific ImageCache presets.'),
    '#weight' => 15,
  );

  $presets = imagecrop_presets_list();
  if (count($presets)) {
    $form['imagecrop']['imagecrop'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable JavaScript crop'),
      '#default_value' => (bool) $widget['imagecrop'],
      '#description' => t('Enable JavaScript image crop tool for this widget.'),
    );

    $form['imagecrop']['imagecrop_presets'] = array(
      '#title' => t('Enabled imagecrop presets'),
      '#type' => 'checkboxes',
      '#options' => $presets,
      '#default_value' => (array) $widget['imagecrop_presets'],
      '#description' => t('Select which Imagecache presets should be available for cropping. If no presets are selected, the option to crop the image is not displayed.'),
    );
  }
  else {
    $form['imagecrop']['imagecrop_warning'] = array(
      '#value' => t('No preset is found with the javascript_crop action so far. If you want to take advantage of this module, you will need to create at least one preset with that action.'),
    );
  }

  return $form;
}

/**
 * Get a list of styles suitable for an #options array.
 */
function imagecrop_presets_list() {
  $presets = array();
  foreach (imagecache_presets() as $preset) {
    foreach ($preset['actions'] as $action) {
      if ($action['action'] == 'imagecrop_javascript') {
        $presets[$preset['presetname']] = $preset['presetname'];
      }
    }
  }
  return $presets;
}

/**
 * Implementation of hook_elements().
 */
function imagecrop_elements() {
  // Add our function to the form element declared by imagefield.
  // TODO: Do the same thing for the image and node_images modules.
  $elements = array();
  $elements['imagefield_widget'] = array('#after_build' => array('imagecrop_process'));

  return $elements;
}

/**
 * Process function for imagecrop-enabled fields.
 */
function imagecrop_process($element) {
  $field = content_fields($element['#field_name'], $element['#type_name']);

  // Bail out if user does not have permission to crop images.
  if (!user_access('crop images with toolbox')) {
    return $element;
  }

  // Bail out of imagecrop is not enabled on this field.
  if (!$field['widget']['imagecrop']) {
    return $element;
  }

  $imagecache_presets = array_filter((array) $field['widget']['imagecrop_presets']);
  if (empty($imagecache_presets)) {
    return $element;
  }

  $element['imagecrop'] = array(
    '#type' => 'markup',
    '#widget' => $field['widget'],
    '#weight' => 10,
    '#suffix' => '</div>',
  );
  if ($element['fid']['#value']) {
    $element['imagecrop']['#prefix'] = '<div class="imagecrop form-item container-inline">';
    $element['imagecrop']['#value'] = imagecrop_linkitem($element['fid']['#value'], 'imagefield', $element);
  }
  else {
    $element['imagecrop']['#prefix'] = '<div class="description">';
    $element['imagecrop']['#value'] = t('After uploading an image you\'ll be able to crop it.');
  }
  return $element;
}

/**
 * Implementation of hook_form_alter().
 * Hook into several existing image modules/fields.
 */
function imagecrop_form_alter(&$form, $form_state, $form_id) {

  // do we have presets with javascript_crop ?
  $exists = imagecrop_action_exists();
  // user access
  $access = user_access('crop images with toolbox');
  // get array of available modules
  $hooks = variable_get('imagecrop_modules', array());

  // hook into image module
  if (isset($form['images']['thumbnail']) && module_exists('image') && $exists != FALSE && $access && in_array('image', $hooks)) {
    // it's anonying we have to make a database call to get the right fid.
    $fid = db_result(db_query("SELECT i.fid FROM {image} i LEFT JOIN {files} f on f.fid = i.fid WHERE i.nid=%d AND filepath='%s' AND filename = '_original'", $form['nid']['#value'], $form['images']['_original']['#value']));
    $form['croptab'] = imagecrop_formitem($fid, -10);
  }

  // hook into node_images module
  if ($form_id == '_node_images_list' && module_exists('node_images') && $exists != FALSE && $access) {
    $type = $form['#parameters'][1]->type;
    if (variable_get('node_images_position_'. $type, 'hide') != 'hide' && in_array('node_images_position_'. $type, $hooks)) {
      $form['imagecrop'] = array('#type' => 'hidden', '#value' => '1');
    }
  }

}

/**
 * Helper function to add form item
 *
 * @return $form form markup
 */
function imagecrop_formitem($fid, $weight = 0) {
  return array(
    '#type' => 'item',
    '#value' => imagecrop_linkitem($fid),
    '#weight' => $weight,
  );
}

/**
 * Helper function to add click link
 *
 * @return $form form markup
 */
function imagecrop_linkitem($fid, $module = '', $element = '') {
  $popup = variable_get('imagecrop_popup', 'basic');
  $width = variable_get('imagecrop_popup_width', 700);
  $height = variable_get('imagecrop_popup_height', 600);

  $module = $module ? ('/0/'. $module) : '';
  $field = $element['#field_name'] ? ('/'. $element['#field_name']) : '';
  $node_type = $element['#type_name'] ? ('/'. $element['#type_name']) : '';
  $url = url('imagecrop/showcrop/'. $fid . $module . $field . $node_type, array('absolute' => TRUE));

  if ($popup == 'thickbox' && module_exists('thickbox')) {
    return '[<a class="thickbox" href="'. $url .'?KeepThis=true&TB_iframe=true&height='. $height .'&width='. $width .'">'. t('Crop this image') .'</a>]';
  }
  else {
    return '[<a href="javascript:;" onclick="window.open(\''. $url .'\',\'imagecrop\',\'menubar=0,scrollbars=1,resizable=1,width='. $width .',height='. $height .'\');">'. t('Crop this image') .'</a>]';
  }
}

/**
 * Helper function to search for a cck field image.
 * Temporary images not supported at this point.
 *
 * @param $form complete form object
 * @param $fields all available fields from settings
 * @return ckk imagefields array or false
 */
function imagecrop_find_imagefields($form, $fields) {
  $return = array();
  $temp_path = file_directory_temp();
  foreach ($fields as $field) {
    $temppath = strpos($form[$field][0]['filepath']['#value'], $temp_path);
    $deleteflag = $form[$field][0]['flags']['delete']['#value'];
    if (isset($form[$field]) && $temppath === FALSE && $deleteflag != 1) {
      $return[] = $field;
    }
  }
  return $return;
}

/**
 * Callback with javascript crop.
 *
 * @param $fid id of file
 * @param $presetid id of preset
 */
function imagecrop_docrop($fid, $presetid, $module = '', $field = '', $node_type = '') {

  imagecrop_markup(TRUE, TRUE);
  if (imagecrop_action_exists() == TRUE) {

    $presets = return_presets($presetid, $module, $field, $node_type);
    $file = create_image_object($fid, $presetid, $module);

    if ($file != FALSE) {

      $size_warning = FALSE;
      // get size of temporary image
      $size = getimagesize($file->dst);
      $width = $size[0];
      $height = $size[1];
      // return warning message if crop toolbox is too big and not resizable.
      if (($width < $file->crop_width || $height < $file->crop_height) && $file->resizable == 0) {
        $size_warning = FALSE;
      }

      // add jquery ui
      if ($file->resizable) {
        jquery_ui_add(array('ui.resizable', 'ui.draggable', 'effects.scale'));

        // set aspect ration if needed
        if ($file->aspect) {
          if (is_numeric($file->aspect)) {
            drupal_add_js(array('aspect' => $file->aspect), 'setting');
            // set the initial aspect ratio of the crop region to the ratio chosen in the preset
            $file->crop_width = round($file->crop_height * $file->aspect);
          }
          elseif ($file->aspect == 'KEEP') {
            drupal_add_js(array('aspect' => TRUE), 'setting');
            // set the initial aspect ratio of the crop region to the original image aspect ratio
            $file->crop_width = round(($width * $file->crop_height) / $height);
          }
          elseif ($file->aspect == 'CROP') {
            drupal_add_js(array('aspect' => TRUE), 'setting');
            // set the initial aspect ratio of the crop region to the original image aspect ratio
            $file->crop_width = round($width);
          }
        }
      }
      else {
        jquery_ui_add(array('ui.draggable'));
      }

      // output
      if ($size_warning == FALSE) {
        $url = file_create_url($file->dst);
        $url .= strstr($url, '?')? '&time='. time() : '?time='. time();
        $output = theme('presettabs', $presets, $fid, $presetid, $module, $field, $node_type);
        $output .= '<div id="imagecrop_help">'. t("Resize image if needed, then select a crop area. Click 'Crop image thumbnail' to save your crop area.<br/>After that close the window and save your node form.") .'</div>';
        $output .= theme('imagecrop', $url, $width, $height, $file->resizable);
        $output .= drupal_get_form('imageoffsets', $file->xoffset, $file->yoffset, $file->crop_width, $file->crop_height, $presetid, $fid, $module, $field, $node_type, $file->orig_width, $file->orig_height, $file->scale, $file->preset_destination);
      }
      else {
        $output .= '<div id="imagecrop_info" class="imagecrop_error">'. t('The crop toolbox is too big for this image.') .' <a href="javascript:history.back();"><span class="white">'. t('Back') .'</span></a></div>';
      }

      return $output;

    }
    else {
      return '<div id="imagecrop_info" class="imagecrop_error">'. t('Image to crop was not found.') .'</div>';
    }

  }
  else {
    return '<div id="imagecrop_info"  class="imagecrop_error">'. t('No preset is found with the javascript_crop action so far. If you want to take advantage of this module, you will need to create at least one preset with that action.') .'</div>';
  }

}

/**
 * Callback to return offsets, height & width
 *
 * @param $xoffset x value of javascript box
 * @param $yoffset y value of javascript box
 * @param $crop_width width of javascript box
 * @param $crop_height height of javascript box
 * @param $presetid id of preset
 * @param $fid id of file
 * @param $module specific module
 * @param $preset_destination destination of the imagecache to save
 * @return array $form
 */
function imageoffsets(&$form_state, $xoffset, $yoffset, $crop_width, $crop_height, $presetid, $fid, $module, $field, $node_type, $width, $height, $scale, $preset_destination) {

  $step = variable_get('imagecrop_scale_step', 50);
  $aspect = $width / $height;
  $options['original'] = $width .' x '. $height .'px (Original)';
  $width -= $step;
  while ($width > $crop_width && ($width / $aspect) > $crop_height) {
    $options[$width] = $width .' x '. intval($width / $aspect) .'px';
    $width -= $step;
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Crop image thumbnail'),
    '#prefix' => '<table id="imagecrop_table_actions"><tr><td>',
    '#suffix' => '</td>',
  );
  $form['scaling'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => $scale,
    '#prefix' => '<td id="imagecrop-throbber">',
    '#suffix' => '</td></tr></table>',
    '#attributes' => array('onchange' => "$('#imagecrop-throbber').addClass('show'); $('#edit-scaledown').click();"),
  );

  $form['scaledown'] = array(
    '#type' => 'submit',
    '#value' => t('Scale image'),
    '#attributes' => array('style' => "display:none;"),
  );
  $form['image-crop-x'] = array(
    '#type' => 'hidden',
    '#default_value' => $xoffset,
    '#attributes' => array('class' => 'edit-image-crop-x'),
  );
  $form['image-crop-y'] = array(
    '#type' => 'hidden',
    '#default_value' => $yoffset,
    '#attributes' => array('class' => 'edit-image-crop-y'),
  );
  $form['image-crop-width'] = array(
    '#type' => 'hidden',
    '#default_value' => $crop_width,
    '#attributes' => array('class' => 'edit-image-crop-width'),
  );
  $form['image-crop-height'] = array(
    '#type' => 'hidden',
    '#default_value' => $crop_height,
    '#attributes' => array('class' => 'edit-image-crop-height'),
  );
  $form['fid'] = array(
    '#type' => 'hidden',
    '#value' => $fid,
  );
  $form['module'] = array(
    '#type' => 'hidden',
    '#value' => $module,
  );
  $form['field'] = array(
    '#type' => 'hidden',
    '#value' => $field,
  );
  $form['node_type'] = array(
    '#type' => 'hidden',
    '#value' => $node_type,
  );
  $form['presetid'] = array(
    '#type' => 'hidden',
    '#value' => $presetid,
  );
  $form['preset-destination'] = array(
    '#type' => 'hidden',
    '#value' => $preset_destination,
  );

  return $form;

}

/**
 * Save the offset & size values
 *
 * @param $form_id id of the form
 * @param $form_values submitted values of the imageoffsets form
 */
function imageoffsets_submit($form, &$form_state) {

  if ($form_state['values']['op'] == t('Scale image')) {
    $form_state['values']['image-crop-x'] = 0;
    $form_state['values']['image-crop-y'] = 0;
  }

  // save into imagecrop tables
  $module = (!empty($form_state['values']['module'])) ? '/'. $form_state['values']['module'] : '';
  $field = (!empty($form_state['values']['field'])) ? '/'. $form_state['values']['field'] : '';
  $node_type = (!empty($form_state['values']['node_type'])) ? '/'. $form_state['values']['node_type'] : '';
  $reference = $form_state['values']['module'] == 'node_images' ? 'node_images' : 'files';
  db_query("DELETE FROM {imagecrop} WHERE fid=%d AND presetid=%d AND reference = '%s'", $form_state['values']['fid'], $form_state['values']['presetid'], $reference);
  db_query("INSERT INTO {imagecrop} VALUES (%d,%d,'%s',%d,%d,%d,%d,'%s')", $form_state['values']['fid'], $form_state['values']['presetid'], $reference, $form_state['values']['image-crop-x'], $form_state['values']['image-crop-y'], $form_state['values']['image-crop-width'], $form_state['values']['image-crop-height'], $form_state['values']['scaling']);

  if ($form_state['values']['op'] == t('Scale image')) {
    drupal_goto('imagecrop/docrop/'. $form_state['values']['fid'] .'/'. $form_state['values']['presetid'] . $module . $field . $node_type);
  }
  else {
    // delete imagecache preset, so newest file is generated.
    file_delete($form_state['values']['preset-destination']);
    drupal_goto('imagecrop/showcrop/'. $form_state['values']['fid'] .'/'. $form_state['values']['presetid'] . $module . $field . $node_type);
  }

}


/**
 * Show the cropped image.
 *
 * @param $fid file id
 * @param $presetid id of preset
 * @return cropped version of chosen image
 */
function imagecrop_showcrop($fid, $presetid = 0, $module = '', $field = '', $node_type = '') {
  imagecrop_markup(FALSE, TRUE);
  if (imagecrop_action_exists() == TRUE) {
    $presets = return_presets($presetid, $module, $field, $node_type);
    $presetid = $presets['presetid'];
    $file = create_image_object($fid, $presetid, $module, TRUE);
    if ($file != FALSE) {
      $output = theme('presettabs', $presets, $fid, $presetid, $module, $field, $node_type);
      $module = (!empty($module)) ? '/'. $module : '';
      $field = (!empty($field)) ? '/'. $field : '';
      $node_type = (!empty($node_type)) ? '/'. $node_type : '';
      $output .= '<div id="imagecrop_help">'. l(t('Click here to choose another crop area for this picture'), 'imagecrop/docrop/'. $fid .'/'. $presetid . $module . $field . $node_type) .'</div>';
      $output .= theme('imagecrop_result', $file->presetname, $file->filepath);
      return $output;
    }
    else {
      return '<div id="imagecrop_info" class="imagecrop_error">'. t('Image to crop was not found.') .'</div>';
    }
  }
  else {
    return '<div id="imagecrop_info"  class="imagecrop_error">'. t('No preset is found with the javascript_crop action so far. If you want to take advantage of this module, you will need to create at least one preset with that action.') .'</div>';
  }
}

/**
 * Helper function to determine which preset exists and which to load
 *
 * @param $presetid id of preset
 * @return $presets array with presetid to load and list of all other possible presets
 */
function return_presets($presetid, $module = '', $field = '', $node_type = '') {
  $filter = array();
  if ($module == 'imagefield' && $field) {
    $element = content_fields($field, $node_type);
    if ($element['widget']['imagecrop']) {
      $filter = $element['widget']['imagecrop_presets'];
    }
  }

  $all_presets = imagecache_presets();
  foreach ($all_presets as $preset) {
    foreach ($preset['actions'] as $action) {
      if ($action['action'] == 'imagecrop_javascript') {
        if (!count($filter) || !empty($filter[$preset['presetname']])) {
          $presets['tabs'][] = array('id' => $preset['presetid'], 'name' => $preset['presetname']);
          if ($presetid == $preset['presetid']) {
            $presets['presetid'] = $preset['presetid'];
          }
        }
      }
    }
  }

  if (!isset($presets['presetid'])) {
    $presets['presetid'] = $presets['tabs'][0]['id'];
  }
  return $presets;
}

/**
 * Helper function to create image
 *
 * @param $fid file id in files table
 * @param $presetid id of the preset
 * @param $cutoff delete the javascript crop action when user wants to define the offsets
 * @return $file with file, javascript crop and preset properties
 */
function create_image_object($fid, $presetid, $module = '', $cutoff = FALSE) {

  $file = _imagecrop_file_load($fid, $module);
  if ($file != FALSE) {
    $preset = imagecache_preset($presetid);

    if ($cutoff == FALSE) {

      // get the actions from the preset and and throw out the javascript_crop action
      // and every other action which comes after it.
      $break = FALSE;
      while (list($key, $val) = each($preset['actions'])) {

        if ($val['action'] == 'imagecrop_javascript') {
          $crop_width = $preset['actions'][$key]['data']['width'];
          $crop_height = $preset['actions'][$key]['data']['height'];
          $resizable = $preset['actions'][$key]['data']['resizable'];
          $aspect = $preset['actions'][$key]['data']['aspect'];
          $break = TRUE;
        }
        if ($break == TRUE) {
          unset($preset['actions'][$key]);
        }

      }

      if ($aspect == 'CROP') {
        $aspect = $crop_width / $crop_height;
      }

      // see if we have stored values allready for this file
      $file->xoffset = 0;
      $file->yoffset = 0;
      $file->crop_width = $crop_width;
      $file->crop_height = $crop_height;
      $reference = $module == 'node_images' ? 'node_images' : 'files';
      $row = db_fetch_object(db_query("SELECT xoffset,yoffset,width,height,scale FROM {imagecrop} ic where ic.fid = %d AND ic.presetid = %d AND ic.reference = '%s'", $fid, $presetid, $reference));
      $firstscale = FALSE;
      if (!empty($row)) {
        $file->xoffset = $row->xoffset;
        $file->yoffset = $row->yoffset;
        $file->crop_width = $row->width;
        $file->crop_height = $row->height;
        $file->scale = $row->scale;
        $firstscale = TRUE;
      }
      // resizable or not
      $file->resizable = $resizable;

      // aspect ratio
      $file->aspect = $aspect;

      // original size after first imagecache actions
      $src = $file->filepath;
      $dst = imagecache_create_path($cutoff ? $preset['presetname'] : '_imagecrop_temp', $file->filepath);
      file_delete($dst);
      imagecache_build_derivative($preset['actions'], $src, $dst);

      $orig = getimagesize($dst);
      $file->orig_width = $orig[0];
      $file->orig_height = $orig[1];

      // add scale action if necessary
      if ($row->scale != 'original' && $firstscale == TRUE) {
        $preset['actions'][] = array(
          'action' => 'imagecache_scale',
          'data' => array('width' => $row->scale, 'height' => '', 'upscale' => 'false'));
      }

    }

    $file->presetname = $preset['presetname'];

    $file->dst = $dst;
    $file->preset_destination = imagecache_create_path($file->presetname, $file->filepath);

    // create the file to display for the crop,
    // we also set a global presetid variable, so I can use this in
    // the javascript_crop action
    $GLOBALS['imagecrop_presetid'] = $presetid;

    // flush first, then generate the final preset.
    file_delete($dst);
    imagecache_build_derivative($preset['actions'], $src, $dst);
    return $file;

  }
  else {
    return FALSE;
  }

}

/**
 * Helper function to load a file into an object
 *
 * @param $fid file id
 * @param $module specific module which does not use the files table
 * @return $file with properties of the file or false
 */
function _imagecrop_file_load($fid, $module) {

  global $user;

  if (empty($module) || $module == 'imagefield') {
    $file = db_fetch_object(db_query('SELECT * FROM {files} WHERE fid = %d', $fid));
  }
  elseif ($module == 'node_images') {
    $file = db_fetch_object(db_query('SELECT * FROM {node_images} WHERE id = %d', $fid));
  }

  if ($file) {

    // make sure it's an image. Any other mime extensions possible?
    // return false if it's not the right mime type
    $filemime = array('image/jpeg', 'image/gif', 'image/png', 'image/pjpeg');
    if (!in_array($file->filemime, $filemime)) return FALSE;
    // access denied if current user hasn't enough permissions
    if (!user_access('crop any image with toolbox') && !user_access('administer nodes') && $user->uid != $file->uid) {
      drupal_access_denied();
      exit();
    }
    // all seems ok, return file
    return $file;

  }

  // return false if no file was found.
  return FALSE;

}

/**
 * Theme image crop.
 *
 * @param $url url of image
 * @param $width width of image
 * @param $height height of image
 * @param $resize wether the cropping box is resizeble or not
 * @return $output html of the javascript crop area
 */
function theme_imagecrop($url, $width, $height, $resize = 0) {
  $output = '
    <div style="margin-left: 3px;"><div class="imagefield-crop-wrapper" id="imagefield-crop-wrapper" style="position: absolute; margin-top: 45px; width: '. $width .'px; height: '. $height .'px;">
      <div id="image-crop-container" style="background-image: url(\''. $url .'\'); width:'. $width  .'px; height:'. $height  .'px;"></div>
      <div id="resizeMe" style="background-image: url(\''. $url .'\'); width:'. $width  .'px; height:'. $height  .'px; top: 20px;">';
  $output .= '</div></div></div><div style="clear:both;"></div>';

  return $output;
}

/**
 * Theme cropped image result.
 *
 * @param string $presetname
 * @param string $filepath
 * @param string $alt
 * @param string $attributes
 * @return image
 */
function theme_imagecrop_result($presetname, $filepath, $alt = '', $attributes = NULL) {
  $url = imagecache_create_url($presetname, $filepath, TRUE);
  return '<img src="'. $url .'" alt="'. check_plain($alt) .'" title="'. check_plain($alt) .'" '. $attributes .' />';
}

/**
 * Theme preset tabs
 *
 * @param $tabs array of available presets
 * @param fid file id
 * @param $presetid preset to highlight
 * @return $output html of the tabs
 */
function theme_presettabs($presets, $fid, $presetid, $module = '', $field = '', $node_type = '') {
  $module = $module ? ('/'. $module) : '';
  $field = $field ? ('/'. $field) : '';
  $node_type = $node_type ? ('/'. $node_type) : '';
  $tab_output = '';
  foreach ($presets['tabs'] as $key => $value) {
    $class = ($value['id'] == $presetid) ? 'imagecrop_tab imagecrop_highlight' : 'imagecrop_tab ';
    $url = 'imagecrop/showcrop/'. $fid .'/'. $value['id'] . $module . $field . $node_type;
    $tab_output .= '<span class="'. $class .'">'. l($value['name'], $url) .'</span>';
  }
  $output = '<div id="imagecrop_presettabs">'. t('Select a preset to crop &raquo;') .' '. $tab_output .'</div>';
  return $output;
}

/**
 * Add imagecrop css & javascript
 */
function imagecrop_markup($js, $css) {
  $path = drupal_get_path('module', 'imagecrop');
  if ($js == TRUE) drupal_add_js($path .'/imagecrop.js');
  if ($css == TRUE) drupal_add_css($path .'/imagecrop.css');
}

/**
 * Validation of the aspect ratio entry
 */
function imagecrop_validate_aspect(&$element, &$form_state) {
  if (!is_numeric($element['#value'])) {
    if (strtolower($element['#value']) != 'keep' && strtolower($element['#value']) != 'crop') {
      if (!empty($element['#value'])) {
        drupal_set_message(t('Aspect ratio must be a number, the string KEEP, CROP, or empty if you don\'t want to fix it. Defaulting to empty.'));
      }
      form_set_value($element, FALSE, $form_state);
    }
    else {
      form_set_value($element, strtoupper($element['#value']), $form_state);
    }
  }
  else {
    form_set_value($element, abs((float)$element['#value']), $form_state);
  }
}